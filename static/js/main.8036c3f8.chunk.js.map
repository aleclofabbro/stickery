{"version":3,"sources":["lib/utils.ts","ui/templates/Main.tsx","state/project/reducer.ts","state/project/index.tsx","ui/elements/basic/Button.tsx","ui/elements/top-bar/Button.tsx","ui/modules/Modal/Modal.tsx","lib/hook/useNavStack.ts","ui/modules/top-bar/SetBgButton.tsx","lib/importImage.ts","srv/db/index.ts","hoc/modules/importedImageGallery/ImportedImageGalleryHOC.tsx","lib/hook/useFileChooser.tsx","hoc/modules/top-bar/SetBgButtonHoc.tsx","lib/hook/useBoolState.ts","srv/fabric/canvas.ts","hoc/canvas/MainCanvasHoc.tsx","index.tsx","ctx/globs.tsx","hoc/App.tsx"],"names":["k","MainTpl","Canvas","TopBar","style","outerStyle","topBarStyle","canvasStyle","display","gridTemplate","gridArea","backgroundColor","reducer","prev","action","_reducer","t","setBackground","p","state","v","initialState","background","ProjectStateCtx","createContext","useProjectState","useContext","ProvideProjectState","children","useReducer","value","dispatch","Provider","Button","onClick","TopBarButton","btnStyle","float","Modal","onClickOut","ref","useRef","useEffect","current","div","parent","parentElement","document","body","appendChild","onBack","back","window","history","pushState","_onBack","addEventListener","removeEventListener","useMemo","bgClick","useCallback","ev","target","currentTarget","id","bgStyle","modalStyle","position","left","top","right","bottom","SetBgButton","closeModal","isModalOpen","openModal","Gallery","getImageSrcUrl","name","stickeryDB","imageData","imageMeta","version","stores","table","Dexie","importFile","file","a","async","arrayBuffer","imgData","blob","add","imgMeta","size","lastModified","type","src","Promise","resolve","GridGallery","require","ImportedImageGalleryHOC","onClickImage","useState","images","setImagesMeta","toArray","then","creating","_primKey","newImageMeta","_tx","creatingHook","hook","subscribe","unsubscribe","useImagesStore","fileChoosen","onFileChoosen","inputRef","chooseFile","click","input","createElement","setAttribute","changeListener","files","length","removeChild","pasteListener","pasteEv","data","clipboardData","dropListener","dragEv","dataTransfer","useFileChooser","gridImages","map","meta","thumbnail","thumbnailWidth","thumbnailHeight","select","this","props","item","templateStyle","headStyle","galleryContainerStyle","gridConfig","onClickThumbnail","enableImageSelection","overflowY","overflowX","SetBgButtonHoc","initial","setState","toFalse","toTrue","toggle","b","T","F","s","useBoolState","imageSelected","canvasOpts","interactive","canvas","MainCanvasHoc","set","bgImage","setBgImage","resizeCanvas","_canvas","dim","height","innerHeight","width","innerWidth","zoom","Math","min","setDimensions","setZoom","renderAll","bg","fabric","Image","fromURL","img","setBackgroundImage","elem","canvasElem","useFabricCanvas","mainCanvasStyle","ReactDOM","render","mainProps","getElementById","navigator","serviceWorker","register"],"mappings":"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","file":"static/js/main.8036c3f8.chunk.js","sourcesContent":["export type Setter<S, K extends keyof S> = (key: K) => (state: S, v: S[K]) => S\nexport const setter = <S, K extends keyof S>(k: K) => (state: S, v: S[K]): S => ({\n  ...state,\n  [k]: v\n})\n","import React, { CSSProperties, SFC } from 'react'\n\nexport interface MainTpl {\n  TopBar: JSX.Element\n  Canvas: JSX.Element\n}\nexport const MainTpl: SFC<MainTpl> = ({ Canvas, TopBar }) => {\n  return (\n    <div style={outerStyle}>\n      <div style={topBarStyle}>{TopBar}</div>\n      <div style={canvasStyle}>{Canvas}</div>\n    </div>\n  )\n}\nconst outerStyle: CSSProperties = {\n  display: 'grid',\n  gridTemplate: `\n  \"top-bar\" 20px\n  \"canvas\" auto\n  `\n}\nconst topBarStyle: CSSProperties = {\n  gridArea: 'top-bar',\n  backgroundColor: '#262626'\n}\nconst canvasStyle: CSSProperties = {\n  gridArea: 'canvas',\n  backgroundColor: '#1a1a1a'\n}\n","import { PrjReducer, ProjectState } from './types'\nimport { setter } from '../../lib/utils'\ntype S = ProjectState\n\nexport const reducer: PrjReducer = (prev, action) => {\n  const next = _reducer(prev, action)\n  return next\n}\nconst _reducer: PrjReducer = (prev, action) => {\n  switch (action.t) {\n    case 'bg': {\n      return setBackground(prev, action.p)\n    }\n  }\n  return prev\n}\n\nexport const setBackground = setter<S, 'background'>('background')\n","import React, { useReducer, createContext, SFC, useContext } from 'react'\nimport { PrjReducer, ProjectState, Actions } from './types'\nimport { reducer } from './reducer'\n\nconst initialState: ProjectState = {\n  background: null // '/_/images/1/xoxo.png'\n}\nexport type ProjectStateCtx = { state: ProjectState; dispatch: React.Dispatch<Actions> }\nexport const ProjectStateCtx = createContext<ProjectStateCtx>({} as ProjectStateCtx)\nexport const useProjectState = () => useContext(ProjectStateCtx)\n\nexport interface Provide {}\nexport const ProvideProjectState: SFC<Provide> = ({ children }) => {\n  const [state, dispatch] = useReducer<PrjReducer>(reducer, initialState)\n  const value = { state, dispatch }\n  return <ProjectStateCtx.Provider value={value}>{children}</ProjectStateCtx.Provider>\n}\n","import React, { SFC, CSSProperties } from 'react'\n\nexport interface Button {\n  onClick(): unknown\n  style?: CSSProperties\n}\n\nexport const Button: SFC<Button> = ({ onClick, style, children }) => {\n  return (\n    <button onClick={onClick} style={style}>\n      {children}\n    </button>\n  )\n}\n","import React, { SFC, CSSProperties } from 'react'\nimport { Button } from '../basic/Button'\n\nexport interface TopBarButton {\n  onClick(): unknown\n}\nexport const TopBarButton: SFC<TopBarButton> = ({ onClick, children }) => {\n  return (\n    <Button style={btnStyle} onClick={onClick}>\n      {children}\n    </Button>\n  )\n}\nconst btnStyle: CSSProperties = {\n  float: 'left',\n  backgroundColor: 'gray'\n}\n","import React, { CSSProperties, SFC, useRef, useEffect, useCallback } from 'react'\nimport { useNavStack } from '../../../lib/hook/useNavStack'\n\nexport interface Modal {\n  onClickOut(): unknown\n}\nexport const Modal: SFC<Modal> = ({ onClickOut, children }) => {\n  const ref = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    if (ref.current) {\n      const div = ref.current\n      const parent = ref.current.parentElement\n      document.body.appendChild(div)\n      return () => {\n        parent && parent.appendChild(div)\n      }\n    }\n  }, [])\n  const { back } = useNavStack(onClickOut)\n  const bgClick = useCallback(\n    (ev: React.MouseEvent<HTMLDivElement>) => {\n      if (ev.target !== ev.currentTarget) {\n        return\n      } else {\n        back()\n        onClickOut()\n      }\n    },\n    [onClickOut, back]\n  )\n\n  return (\n    <div id=\"modal\" ref={ref} style={bgStyle} onClick={bgClick}>\n      <div style={modalStyle}>{children}</div>\n    </div>\n  )\n}\nconst modalStyle: CSSProperties = {\n  position: 'fixed',\n  left: '5%',\n  top: '5%',\n  right: '5%',\n  bottom: '5%',\n  backgroundColor: '#1a1a1a'\n}\nconst bgStyle: CSSProperties = {\n  position: 'fixed',\n  left: 0,\n  top: 0,\n  right: 0,\n  bottom: 0,\n  backgroundColor: 'rgba(255, 255, 255, 0.7)'\n}\n","import { useEffect, useMemo } from 'react'\n\nexport const useNavStack = (onBack: () => unknown) => {\n  useEffect(() => {\n    window.history.pushState({}, '')\n    const _onBack = () => {\n      onBack()\n    }\n    window.addEventListener('popstate', _onBack)\n    return () => {\n      window.removeEventListener('popstate', _onBack)\n      // window.history.back()\n    }\n  }, [onBack])\n  return useMemo(() => {\n    return {\n      back: () => {\n        window.history.back()\n      }\n    }\n  }, [])\n}\n","import React, { SFC } from 'react'\nimport { TopBarButton } from '../../elements/top-bar/Button'\nimport { Modal } from '../Modal/Modal'\n\nexport interface SetBgButton {\n  isModalOpen: boolean\n  openModal(): unknown\n  closeModal(): unknown\n  Gallery: JSX.Element\n}\n\nexport const SetBgButton: SFC<SetBgButton> = ({\n  closeModal,\n  isModalOpen,\n  openModal,\n\n  Gallery\n}) => {\n  return (\n    <>\n      <TopBarButton onClick={openModal}>Sfondo</TopBarButton>\n      {isModalOpen && <Modal onClickOut={closeModal}>{Gallery}</Modal>}\n    </>\n  )\n}\n","export const getImageSrcUrl = (name: string, id: number) => `/_/images/${id}/${name}`\n","import Dexie from 'dexie'\nimport { useEffect, useMemo, useState } from 'react'\nimport { getImageSrcUrl } from '../../lib/importImage'\n\nexport interface ImageData {\n  id?: number\n  blob: Blob\n}\nexport interface ImageMeta {\n  id: number\n  name: string\n  type: string\n  size: number\n  lastModified: number\n  src: string\n}\n\nclass StickeryDatabase extends Dexie {\n  imageData: Dexie.Table<ImageData, number>\n  imageMeta: Dexie.Table<ImageMeta, number>\n\n  constructor() {\n    super('Stickery')\n    this.version(1).stores({\n      imageData: '++id, blob',\n      imageMeta: 'id,src, name, type, size, lastModified'\n    })\n    this.imageData = this.table('imageData')\n    this.imageMeta = this.table('imageMeta')\n  }\n}\nexport const stickeryDB = new StickeryDatabase()\n\nexport const useImagesStore = () => {\n  const [images, setImagesMeta] = useState<ImageMeta[]>([])\n  useEffect(() => {\n    stickeryDB.imageMeta.toArray().then(setImagesMeta)\n  }, [])\n  useEffect(() => {\n    const creating = (_primKey: string, newImageMeta: ImageMeta, _tx: Dexie.Transaction) => {\n      setImagesMeta([newImageMeta, ...images])\n    }\n    const creatingHook = stickeryDB.imageMeta.hook('creating')\n    creatingHook.subscribe(creating)\n    return () => {\n      creatingHook.unsubscribe(creating)\n    }\n  }, [images])\n  return useMemo(() => {\n    return { images, add: importFile }\n  }, [images])\n}\n\nexport const importFile = async (file: File): Promise<ImageMeta> => {\n  const imgData: ImageData = {\n    //@ts-ignore\n    blob: await file.arrayBuffer()\n  }\n  const id = await stickeryDB.imageData.add(imgData)\n  const imgMeta: ImageMeta = {\n    size: file.size,\n    lastModified: file.lastModified,\n    name: file.name,\n    type: file.type,\n    src: getImageSrcUrl(file.name, id),\n    id\n  }\n  await stickeryDB.imageMeta.add(imgMeta)\n  return Promise.resolve(imgMeta)\n}\n","import React, { SFC, useCallback, useMemo, CSSProperties } from 'react'\nimport { ImageMeta, useImagesStore } from '../../../srv/db'\nimport { Button } from '../../../ui/elements/basic/Button'\nimport { useFileChooser } from '../../../lib/hook/useFileChooser'\nconst GridGallery = require('react-grid-gallery')\nexport interface Image {\n  src: string\n  thumbnail: string\n  thumbnailWidth: number\n  thumbnailHeight: number\n}\nexport interface ImportedImageGalleryHOC {\n  onClickImage(meta: ImageMeta): unknown\n}\nexport const ImportedImageGalleryHOC: SFC<ImportedImageGalleryHOC> = ({ onClickImage }) => {\n  const { images, add } = useImagesStore()\n  const [importFile] = useFileChooser({ onFileChoosen: add })\n\n  const gridImages = useMemo<Image[]>(\n    () =>\n      images.map((imgMeta) => {\n        return {\n          meta: imgMeta,\n          src: imgMeta.src,\n          thumbnail: imgMeta.src,\n          thumbnailWidth: 0,\n          thumbnailHeight: 0\n        }\n      }),\n    [images]\n  )\n\n  const select = useCallback(\n    function(this: { props: { item: { meta: ImageMeta } } }) {\n      onClickImage(this.props.item.meta)\n    },\n    [onClickImage]\n  )\n  return (\n    <div style={templateStyle}>\n      <div style={headStyle}>\n        <Button onClick={importFile}>scegli file</Button>\n        <br />\n        <span>o incolla</span>\n      </div>\n      <div style={galleryContainerStyle}>\n        <GridGallery {...gridConfig} images={gridImages} onClickThumbnail={select} />\n      </div>\n    </div>\n  )\n}\n\nconst gridConfig = {\n  enableImageSelection: false\n}\n\nconst templateStyle: CSSProperties = {\n  display: 'grid',\n  gridTemplate: `\n  \"head\" 20px\n  \"gallery\" auto\n  `,\n  position: 'absolute',\n  top: 0,\n  bottom: 0\n}\n\nconst headStyle: CSSProperties = {\n  gridArea: 'head'\n}\n\nconst galleryContainerStyle: CSSProperties = {\n  gridArea: 'gallery',\n  overflowY: 'auto',\n  overflowX: 'hidden'\n}\n","import { useCallback, useEffect, useRef } from 'react'\n\nexport interface Opts {\n  onFileChoosen(file: File, by: 'fs' | 'paste' | 'drop'): unknown\n}\n\nexport const useFileChooser = ({ onFileChoosen: fileChoosen }: Opts): [() => unknown] => {\n  const inputRef = useRef<HTMLInputElement | null>(null)\n  const chooseFile = useCallback(() => inputRef.current && inputRef.current.click(), [])\n  useEffect(() => {\n    const input = document.createElement('input')\n    input.setAttribute('type', 'file')\n    input.style.display = 'none'\n    const changeListener = () => {\n      const file = input.files && input.files.length > 0 && input.files[0]\n      if (!file) {\n        return\n      }\n      fileChoosen(file, 'fs')\n    }\n    input.addEventListener('change', changeListener)\n    document.body.appendChild(input)\n    inputRef.current = input\n    return () => {\n      input.removeEventListener('change', changeListener)\n      document.body.removeChild(input)\n      inputRef.current = null\n    }\n  }, [fileChoosen])\n\n  useEffect(() => {\n    const pasteListener = (pasteEv: ClipboardEvent) => {\n      const data = pasteEv.clipboardData\n      if (!(data && data.files && data.files.length > 0)) {\n        return\n      }\n      const file = data.files[0]\n      fileChoosen(file, 'paste')\n    }\n    document.body.addEventListener('paste', pasteListener)\n    return () => {\n      document.body.removeEventListener('paste', pasteListener)\n    }\n  }, [fileChoosen])\n\n  useEffect(() => {\n    const dropListener = (dragEv: DragEvent) => {\n      const data = dragEv.dataTransfer\n      if (!(data && data.files.length > 0)) {\n        return\n      }\n      const file = data.files[0]\n      fileChoosen(file, 'paste')\n    }\n    document.body.addEventListener('drop', dropListener)\n    return () => {\n      document.body.removeEventListener('drop', dropListener)\n    }\n  }, [fileChoosen])\n\n  return [chooseFile]\n}\n","import React, { SFC, useCallback, useMemo } from 'react'\nimport { useBoolState } from '../../../lib/hook/useBoolState'\nimport { ImageMeta } from '../../../srv/db'\nimport { useProjectState } from '../../../state/project'\nimport { SetBgButton } from '../../../ui/modules/top-bar/SetBgButton'\nimport { ImportedImageGalleryHOC } from '../importedImageGallery/ImportedImageGalleryHOC'\n\nexport const SetBgButtonHoc: SFC = () => {\n  const { dispatch } = useProjectState()\n  const { b: isModalOpen, T: openModal, F: closeModal } = useBoolState(false)\n  const imageSelected = useCallback(\n    (meta: ImageMeta) => {\n      dispatch({ t: 'bg', p: meta.src })\n      closeModal()\n    },\n    [closeModal, dispatch]\n  )\n\n  const Gallery = useMemo(() => <ImportedImageGalleryHOC onClickImage={imageSelected} />, [\n    imageSelected\n  ])\n\n  return (\n    <SetBgButton\n      closeModal={closeModal}\n      isModalOpen={isModalOpen}\n      openModal={openModal}\n      Gallery={Gallery}\n    />\n  )\n}\n","import { useCallback, useState } from 'react'\n\nexport const useBoolState = (initial: boolean) => {\n  let [state, setState] = useState(false)\n  const toFalse = useCallback(() => setState(false), [])\n  const toTrue = useCallback(() => setState(true), [])\n  const toggle = useCallback(() => setState(!state), [state])\n  return { b: state, T: toTrue, F: toFalse, t: toggle, s: setState }\n}\n","import { fabric } from 'fabric'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useProjectState } from '../../state/project'\n\nconst canvasOpts: fabric.ICanvasOptions = {\n  interactive: true\n}\n\nlet canvas: fabric.Canvas | null = null\nexport const useFabricCanvas = () => {\n  const { state } = useProjectState()\n  const [bgImage, setBgImage] = useState<fabric.Image>()\n  const resizeCanvas = useCallback(() => {\n    const _canvas = canvas\n    if (!(_canvas && bgImage)) {\n      return\n    }\n\n    const dim = {\n      height: window.innerHeight - 20,\n      width: window.innerWidth\n    }\n    const zoom = Math.min(dim.height / (bgImage.height || 1), dim.width / (bgImage.width || 1))\n\n    _canvas.setDimensions(dim)\n    _canvas.setZoom(zoom)\n    _canvas.renderAll()\n  }, [bgImage])\n  useEffect(() => resizeCanvas(), [bgImage, resizeCanvas])\n\n  useEffect(() => {\n    const _canvas = canvas\n    const bg = state.background\n    if (!(_canvas && bg)) {\n      return\n    }\n    fabric.Image.fromURL(bg, (img) => {\n      _canvas.setBackgroundImage(img, () => {\n        setBgImage(img)\n      })\n    })\n  }, [state.background])\n\n  useEffect(() => {\n    // resize on init\n    window.addEventListener('resize', resizeCanvas, false)\n    return () => {\n      window.removeEventListener('resize', resizeCanvas, false)\n    }\n  }, [resizeCanvas])\n\n  return useMemo(() => {\n    return {\n      set: (elem: HTMLElement) => {\n        const canvasElem = document.createElement('canvas')\n        elem.appendChild(canvasElem)\n        canvas = new fabric.Canvas(canvasElem, canvasOpts)\n      }\n    }\n  }, [])\n}\n","import React, { CSSProperties, SFC, useRef, useEffect } from 'react'\nimport { useFabricCanvas } from '../../srv/fabric/canvas'\n\nexport const MainCanvasHoc: SFC = () => {\n  const ref = useRef<HTMLDivElement>(null)\n  const { set } = useFabricCanvas()\n  useEffect(() => {\n    const div = ref.current\n    if (div) {\n      set(div)\n    }\n  }, [set])\n\n  return <div style={mainCanvasStyle} ref={ref}></div>\n}\n\nconst mainCanvasStyle: CSSProperties = {\n  // position: 'absolute',\n  // top: 0,\n  // bottom: 0,\n  // left: 0,\n  // right: 0\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './hoc/App'\nimport { GlobCtx } from './ctx/globs'\n// import { defineCustomElements } from '@ionic/pwa-elements/loader'\n// import * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <GlobCtx>\n    <App />\n  </GlobCtx>,\n  document.getElementById('root')\n)\n\n// defineCustomElements(window)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n//serviceWorker.register()\nnavigator.serviceWorker.register('sw.js')\n","import React, { SFC } from 'react'\nimport { ProvideProjectState } from '../state/project'\n\nexport const GlobCtx: SFC = ({ children }) => {\n  return <ProvideProjectState>{children}</ProvideProjectState>\n}\n","import React, { SFC, useMemo } from 'react'\nimport { MainTpl } from '../ui/templates/Main'\nimport { SetBgButtonHoc } from './modules/top-bar/SetBgButtonHoc'\nimport { MainCanvasHoc } from './canvas/MainCanvasHoc'\n\nexport const App: SFC = () => {\n  const mainProps = useMemo<MainTpl>(() => {\n    return {\n      TopBar: (\n        <>\n          <SetBgButtonHoc />\n        </>\n      ),\n      Canvas: <MainCanvasHoc />\n    }\n  }, [])\n\n  return <MainTpl {...mainProps}></MainTpl>\n}\n"],"sourceRoot":""}